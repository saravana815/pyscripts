#!/bin/sh
# \
exec expect -- "$0" ${1+"$@"}
# Name: autoexpect - generate an Expect script from watching a session
#
# Description:
#
# Given a program name, autoexpect will run that program.  Otherwise
# autoexpect will start a shell.  Interact as desired.  When done, exit
# the program or shell.  Autoexpect will create a script that reproduces
# your interactions.  By default, the script is named script.exp.
# See the man page for more info.
#
# Author: Don Libes, NIST
# Date: June 30 1995
# Version: 1.4b

# The modified custom changes to this script by sargandh@cisco.com
# Read README.txt for the new changes and usage

set filename "script.exp"
set verbose 1
set conservative 0
set promptmode 1
set option_keys ""


proc check_for_following {type} {
	if {![llength [uplevel set argv]]} {
		puts "autoexpect: [uplevel set flag] requires following $type"
		exit 1
	}
}	

while {[llength $argv]>0} {
	set flag [lindex $argv 0]
	if {0==[regexp "^-" $flag]} break
	set argv [lrange $argv 1 end]
	switch -- $flag \
	  "-c" {
		set conservative 1
	} "-C" {
		check_for_following character
		lappend option_keys [lindex $argv 0] ctoggle
		set argv [lrange $argv 1 end]
	} "-p" {
		set promptmode 1
	} "-P" {
		check_for_following character
		lappend option_keys [lindex $argv 0] ptoggle
		set argv [lrange $argv 1 end]
	} "-Q" {
		check_for_following character
		lappend option_keys [lindex $argv 0] quote
		set argv [lrange $argv 1 end]
	} "-f" {
		check_for_following filename
		set filename [lindex $argv 0]
		set argv [lrange $argv 1 end]
	} "-quiet" {
		set verbose 0
	} "-h" {
                puts "\nUsage  : ./easyexpect \[-f output_script_name\] \[-h #For help\] COMMAND"
                puts "Example: ./easyexpect  -f ssh_login.exp ssh localhost\n"
                exit 0
        } default {
		break
	}
}

#############################################################
# Variables	Descriptions
#############################################################
# userbuf	buffered characters from user
# procbuf	buffered characters from process
# lastkey	last key pressed by user
#		if undefined, last key came from process
# echoing	if the process is echoing
#############################################################

# Handle a character that came from user input (i.e., the keyboard)
proc input {c} {
	global userbuf lastkey

	send -- $c
	append userbuf $lastkey
	set lastkey $c
}

# Handle a null character from the keyboard
proc input_null {} {
	global lastkey userbuf procbuf echoing

	send -null

	if {$lastkey == ""} {
		if {$echoing} {
			sendcmd "$userbuf"
		}
		if {$procbuf != ""} {
			expcmd "$procbuf"
		}
	} else {
		sendcmd "$userbuf"
		if {$echoing} {
			expcmd "$procbuf"
			sendcmd "$lastkey"
		}			
	}
	cmd "send -null"
	set userbuf ""
	set procbuf ""
	set lastkey ""
	set echoing 0
}

# Handle a character that came from the process
proc output {s} {
	global lastkey procbuf userbuf echoing

	send_user -raw -- $s

	if {$lastkey == ""} {
		if {!$echoing} {
			append procbuf $s
		} else {
			sendcmd "$userbuf"
			expcmd "$procbuf"
			set echoing 0
			set userbuf ""
			set procbuf $s
		}
		return
	}

	regexp (.)(.*) $s dummy c tail
	if {$c == $lastkey} {
		if {$echoing} {
			append userbuf $lastkey
			set lastkey ""
		} else {
			if {$procbuf != ""} {
				expcmd "$procbuf"
				set procbuf ""
			}
			set echoing 1
		}
		append procbuf $s

		if {[string length $tail]} {
			sendcmd "$userbuf$lastkey"
			set userbuf ""
			set lastkey ""
			set echoing 0
		}
	} else {
		if {!$echoing} {
			expcmd "$procbuf"
		}
		sendcmd "$userbuf$lastkey"
		set procbuf $s
		set userbuf ""
		set lastkey ""
		set echoing 0
	}
}

# rewrite raw strings so that can appear as source code but still reproduce
# themselves.
proc expand {s} {
	regsub -all "\\\\" $s "\\\\\\\\" s
	regsub -all "\r" $s "\\r"  s
	regsub -all "\"" $s "\\\"" s
	regsub -all "\\\[" $s "\\\[" s
	regsub -all "\\\]" $s "\\\]" s
	regsub -all "\\\$" $s "\\\$" s

	return $s
}

# generate an expect command
proc expcmd {s} {
	global promptmode

	if {$promptmode} {
            #Check for multiline output on expect_output 
            if {[regexp "(.*\[\r\n]+)(.*)" $s dummy cmd_output s]} {
                regsub -all -line {^} $cmd_output "#verify_this_output {" cmd_output
                regsub -all -line {$} $cmd_output "}" cmd_output
                if {$s == ""} {
                    cmd {send -- "\r"}
                    cmd "[expand $cmd_output]"
                } else {
                    cmd "expect -exact \"[expand $s]\""
                    cmd "[expand $cmd_output]"
                }
            }
	} else {
            cmd "expect -exact \"[expand $s]\""
        }
}

# generate a send command
proc sendcmd {s} {
	global send_style conservative

	if {$conservative} {
		cmd "sleep .1"
	}

        if {[regexp {^sh(ow)?\s+} [expand $s]] == 1} {
            #prepend sleep command only for show * CLI commands
            cmd "#sleep 60; #sleep for 60 seconds"
        }
	cmd "send$send_style -- \"[expand $s]\""
}

# generate any command
proc cmd {s} {
	global fd
	puts $fd "$s"
}

proc verbose_send_user {s} {
	global verbose

	if {$verbose} {
		send_user -- $s
	}
}

proc ctoggle {} {
	global conservative send_style

	if {$conservative} {
		cmd "# conservative mode off - adding no delays"
		verbose_send_user "conservative mode off\n"
		set conservative 0
		set send_style ""
	} else {
		cmd "# prompt mode on - adding delays"
		verbose_send_user "conservative mode on\n"
		set conservative 1
		set send_style " -s"
	}
}

proc ptoggle {} {
	global promptmode

	if {$promptmode} {
		cmd "# prompt mode off - now looking for complete output"
		verbose_send_user "prompt mode off\n"
		set promptmode 0
	} else {
		cmd "# prompt mode on - now looking only for prompts"
		verbose_send_user "prompt mode on\n"
		set promptmode 1
	}
}

# quote the next character from the user
proc quote {} {
	expect_user -re .
	send -- $expect_out(buffer)
}
	
set verify_this_output_proc {
proc verify_this_output {line} {
    global expect_out
    send_log "\n----------------------------------------------------\n"
    send_log "Checking for the below line to be present on ouptut\n"
    send_log "$line"
    send_log "\n----------------------------------------------------\n"

    #Delimited string check. example #(16.100.0.14)     1     (FULL/DR)         00:00:37)
    #Get delimited string list and form regexp with delimited strings joined by tcl .*
    set string_list [regexp -all -line -inline {\(.*?\)} $line]
    if {[llength $string_list] >= 1} {
        set string_regex {}
        set string_index 1
        set string_list_length [llength $string_list]
        foreach l $string_list {
            append string_regex [string trim $l "()"]
            if {$string_index < $string_list_length} {
                append string_regex {.*}
            }
            incr string_index
        }
        if {[regexp -line "$string_regex" $expect_out(buffer)] == 1} {
            send_log "PASS: Line {$line} found on output"
            send_log "\nTCL regexp used: {$string_regex}"
            send_log "\n----------------------------------------------------\n"
       } else {
            send_log "FAIL: Line {$line} not found on output"
            send_log "\nTCL regexp used: {$string_regex}"
            send_log "\n----------------------------------------------------\n"
       }
   } else {
        #Perform complete line match
        if {[regexp -line "$line" $expect_out(buffer)] == 1} {
            send_log "PASS: Line {$line} found on output"
            send_log "\n----------------------------------------------------\n"
       } else {
            send_log "FAIL: Line {$line} not found on output"
            send_log "\n----------------------------------------------------\n"
        }
    }
}
}

set loop_this_proc {
proc loop_this {count cblock} {
    for {set i 1} {$i <= $count} {incr i} {
        uplevel 1 "eval {$cblock}"
    }
}
}

if {[catch {set fd [open $filename w]} msg]} {
	puts $msg
	exit
}
exec chmod +x $filename
verbose_send_user "autoexpect started, file is $filename\n"

# calculate a reasonable #! line
set expectpath /usr/local/bin		;# prepare default
foreach dir [split $env(PATH) :] {	;# now look for real location
	if {[file executable $dir/expect] && ![file isdirectory $dir/expect]} {
		set expectpath $dir
		break
	}
}

cmd "#![set expectpath]/expect -f
#
# This Expect script was generated by autoexpect on [timestamp -format %c]
# Expect and autoexpect were both written by Don Libes, NIST.
# The modified custom changes to this script by sargandh@cisco.com
# Read README.txt for the new changes and usage "
  
cmd {#

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}
}

cmd "#proc loop_this - easy tcl for loop checks"
cmd "#Usage: loop_this COUNT { TCL code block }"
cmd "$loop_this_proc"

cmd "#proc for verifying show output with expect buffer"
cmd "$verify_this_output_proc"

cmd {set timeout 600}
cmd {set logfile "logs/script_log_[clock  seconds]"}
cmd {log_file $logfile}

if {$conservative} {
	set send_style " -s"
	cmd "set send_slow {1 .1}"
} else {
	set send_style ""
}

if {[llength $argv]>0} {
	eval spawn -noecho $argv
	cmd "spawn $argv"
} else {
	spawn -noecho $env(SHELL)
	cmd "spawn \$env(SHELL)"
}

cmd "match_max 100000"

set lastkey ""
set procbuf ""
set userbuf ""
set echoing 0

remove_nulls 0

eval interact $option_keys {
    -re . {
	input $interact_out(0,string)
    } -o -re .+ {
	output $interact_out(0,string)
    } eof {
	cmd "expect eof"
	return
    }
}

#cmd {
##send email
#set recipient $env(USER) 
#set subject_body "Script $argv0 Logs - http://bgl-ads-1214:5000/file?filename=$env(PWD)/$logfile"
#exec mail -s $subject_body $recipient <<$subject_body
#}

close $fd
verbose_send_user "autoexpect done, file is $filename\n"
